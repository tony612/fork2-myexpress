// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function() {
    var Layer, handler, http;
    http = require('http');
    Layer = require('./layer');
    handler = function(request, response) {
      var errorNext, findNearErrorLayer, findNearNormalLayer, findParentNext, index, next, normalNext, responseWith;
      findParentNext = function(parent) {
        var pIndex, pNext;
        pIndex = parent.stack.indexOf(handler.wrap);
        return pNext = parent.stack[pIndex + 1];
      };
      responseWith = function(code) {
        response.statusCode = code;
        return response.end();
      };
      index = -1;
      findNearNormalLayer = function(index) {
        var l, _i, _len, _ref;
        _ref = handler.stack.slice(index);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          if (l.handle.length < 4 && l.match(request.url)) {
            return l;
          }
        }
      };
      findNearErrorLayer = function(index) {
        var l, _i, _len, _ref;
        _ref = handler.stack.slice(index);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          if (l.handle.length === 4 && l.match(request.url)) {
            return l;
          }
        }
      };
      errorNext = function(err) {
        var nextLayer, pNext, parent;
        if (nextLayer = findNearErrorLayer(index)) {
          return nextLayer.handle(err, request, response, next);
        } else {
          if ((parent = handler.parent) && (pNext = findParentNext(parent))) {
            return pNext.handle(err, request, response);
          } else {
            return responseWith(500);
          }
        }
      };
      normalNext = function() {
        var e, nextLayer, pNext, parent;
        if (nextLayer = findNearNormalLayer(index)) {
          try {
            return nextLayer.handle(request, response, next);
          } catch (_error) {
            e = _error;
            return errorNext(e);
          }
        } else {
          if ((parent = handler.parent) && (pNext = findParentNext(parent))) {
            return pNext.handle(request, response);
          } else {
            return responseWith(404);
          }
        }
      };
      next = function(err) {
        index += 1;
        if (err) {
          return errorNext(err);
        } else {
          return normalNext();
        }
      };
      return next();
    };
    handler.listen = function(port, callback) {
      return http.createServer(handler).listen(port, callback);
    };
    handler.stack = [];
    handler.use = function(path, middleware) {
      var layer, _ref;
      if (!middleware) {
        _ref = ['/', path], path = _ref[0], middleware = _ref[1];
      }
      layer = new Layer(path, middleware);
      if (middleware.stack) {
        middleware.parent = handler;
        middleware.wrap = layer;
      }
      return handler.stack.push(layer);
    };
    return handler;
  };

}).call(this);
