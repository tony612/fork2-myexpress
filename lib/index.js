// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function() {
    var Layer, app, http, mergeObjs;
    http = require('http');
    Layer = require('./layer');
    mergeObjs = function(obj1, obj2) {
      var k, obj3, v;
      obj3 = {};
      obj1 || (obj1 = {});
      obj2 || (obj2 = {});
      for (k in obj1) {
        v = obj1[k];
        obj3[k] = obj1[k];
      }
      for (k in obj2) {
        v = obj2[k];
        obj3[k] = obj2[k];
      }
      return obj3;
    };
    app = function(request, response) {
      var end, endResponse, findNearLayer, findParentNext, index, next, originUrl, paramsWithErr, setReqUrlBack;
      originUrl = request.url;
      if (app.parentUrl) {
        request.url = originUrl.replace(app.parentUrl, '');
      }
      findParentNext = function(parent) {
        var pIndex, pNext;
        pIndex = parent.stack.indexOf(app.wrap);
        return pNext = parent.stack[pIndex + 1];
      };
      endResponse = function(err) {
        var code;
        code = err ? 500 : 404;
        response.statusCode = code;
        return response.end();
      };
      index = -1;
      setReqUrlBack = function() {
        return request.url = originUrl;
      };
      findNearLayer = function(index, err) {
        var isMatch, l, match, _i, _len, _ref;
        isMatch = function(length) {
          if (!!err) {
            return length === 4;
          } else {
            return length < 4;
          }
        };
        _ref = app.stack.slice(index);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          if (isMatch(l.handle.length) && (match = l.match(request.url))) {
            request.params = mergeObjs(request.params, match.params);
            return l;
          }
        }
      };
      paramsWithErr = function(err) {
        var args;
        args = Array.prototype.slice.call(arguments, 0);
        if (!err) {
          args.shift();
        }
        return args;
      };
      end = function(err) {
        var pNext, parent;
        parent = app.parent;
        if (parent) {
          pNext = findParentNext(parent);
        }
        if (!pNext) {
          return endResponse(err);
        }
        setReqUrlBack();
        return pNext.handle.apply(null, paramsWithErr(err, request, response));
      };
      next = function(err) {
        var e, nextLayer;
        index += 1;
        nextLayer = findNearLayer(index, err);
        if (!nextLayer) {
          return end(err);
        }
        try {
          return nextLayer.handle.apply(null, paramsWithErr(err, request, response, next));
        } catch (_error) {
          e = _error;
          return next(e);
        }
      };
      return next();
    };
    app.listen = function(port, callback) {
      return http.createServer(app).listen(port, callback);
    };
    app.handle = app;
    app.stack = [];
    app.use = function(path, middleware) {
      var layer, _ref;
      if (!middleware) {
        _ref = ['/', path], path = _ref[0], middleware = _ref[1];
      }
      if (typeof middleware.handle === 'function') {
        middleware.parentUrl = path;
      }
      layer = new Layer(path, middleware);
      if (middleware.stack) {
        middleware.parent = app;
        middleware.wrap = layer;
      }
      return app.stack.push(layer);
    };
    return app;
  };

}).call(this);
